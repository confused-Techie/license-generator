/**
  This file is in charge of updating the list of valid licenses.
  To do this this package relies soley on the SPDX Website: https://spdx.org/licenses/

  Where we will display all valid licenses listed there.

  This process is unfortunately brittle, as it'll only be able to update the
  licenses that exist within this folder, as well as output a todo list
  for maintainers, but it is not able to update the `./lib/license-generator.js`
  file which actually exposes the licenses to end users. So this must be done manually.

*/

const childProcess = require("node:child_process");
const fs = require("fs");
const path = require("path");

async function update() {
  let COMMANDS = [];
  COMMANDS.push("// WARNING: This text is autogenerated! Do not modify directly!");

  // Check if the repo is cloned, and if not clone it
  if (!fs.existsSync("./license-list-data")) {
    let cloneRepo = await cloneSPDXRepo();

    if (!cloneRepo) {
      console.error("An error occured cloning the SPDX repo!");
      process.exit(1);
    }
  }

  // Now lets generate each license file

  const fileHandler = async (filePath, pathArray, file) => {
    let fileRaw = fs.readFileSync(`./${filePath}`, "utf8");
    let data = JSON.parse(fileRaw);

    // We now have a JSON file representing a license
    // So now it's time to write the file, as well as add it's info to the TODO

    fs.writeFileSync(
      `./licenses/${data.licenseId}.txt`,
      data.licenseText
    );

    COMMANDS.push(
      generateCommandText(data.name, data.licenseId)
    );

  };

  await enumerateFiles(`./license-list-data/json/details/`, [], fileHandler);

  // Now that we are done, lets write our TODO list
  fs.writeFileSync(
    `./COMMANDS.txt`,
    COMMANDS.join("\n")
  );

  console.log("Successfully updated licenses!");
  console.log("Make sure to update the commands!");

}

function generateCommandText(name, spdx) {
  return `"LicenseGenerator: ${name.replace(/"/g, "'")}": () => { this.generate("${spdx}"); },`;
}

async function cloneSPDXRepo() {
  return new Promise((resolve, reject) => {
    try {

      childProcess.exec(
        "git clone https://github.com/spdx/license-list-data",
        { shell: "cmd.exe" },
        (error, stdout, stderr) => {
          if (error) {
            throw error;
            process.exit(1);
          }

          resolve(true);
        });
    } catch(err) {
      throw err;
      process.exit(1);
    }
  });
}

async function enumerateFiles(dir, pathArray, callback) {
  let files = fs.readdirSync(dir);

  for (const file of files) {
    let target = path.join(dir, file);

    if (fs.lstatSync(target).isDirectory()) {
      await enumerateFiles(`./${target}`, [ ...pathArray, file], callback);
    } else {
      await callback(target, pathArray, file);
    }
  }
}

update();
